{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kavioleta08/ConstruccionRecursivaDePolinomios/blob/main/Parcial2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wIEhSdZu8fCX"
      },
      "source": [
        "import numpy as np\n",
        "import sympy as sp\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x = sp.Symbol('x')\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mDvMq8ZgBrty"
      },
      "source": [
        "def polinomio1 (n=3):\n",
        "  polinomios = [0,x-2, x**2+x]\n",
        "\n",
        "  for i in range(3, n+1):\n",
        "    thispoly = polinomios[i-1] - x*polinomios[i-2]\n",
        "    polinomios.append(thispoly.expand())\n",
        "  \n",
        "  return polinomios"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MzWDlBXaAZSu"
      },
      "source": [
        "poly_polinomio1=polinomio1(50)"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "r4frwXZQA23O",
        "outputId": "7a193b07-82cc-43f7-b790-eb21394c4268"
      },
      "source": [
        "poly_polinomio1[50]"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle x^{26} - 275 x^{25} + 12302 x^{24} - 210680 x^{23} + 1792505 x^{22} - 8238945 x^{21} + 18052125 x^{20} + 10265130 x^{19} - 204162030 x^{18} + 730725180 x^{17} - 1595437320 x^{16} + 2481240000 x^{15} - 2915079420 x^{14} + 2666394444 x^{13} - 1932199124 x^{12} + 1120490536 x^{11} - 522557475 x^{10} + 196113801 x^{9} - 59019662 x^{8} + 14126632 x^{7} - 2651593 x^{6} + 381625 x^{5} - 40633 x^{4} + 3014 x^{3} - 139 x^{2} + 3 x$",
            "text/plain": [
              "x**26 - 275*x**25 + 12302*x**24 - 210680*x**23 + 1792505*x**22 - 8238945*x**21 + 18052125*x**20 + 10265130*x**19 - 204162030*x**18 + 730725180*x**17 - 1595437320*x**16 + 2481240000*x**15 - 2915079420*x**14 + 2666394444*x**13 - 1932199124*x**12 + 1120490536*x**11 - 522557475*x**10 + 196113801*x**9 - 59019662*x**8 + 14126632*x**7 - 2651593*x**6 + 381625*x**5 - 40633*x**4 + 3014*x**3 - 139*x**2 + 3*x"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "eDulRm_wDy1Y",
        "outputId": "d10a35ab-69b1-4935-e324-b4d564ee48ba"
      },
      "source": [
        "poly_polinomio1[1]"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle x - 2$",
            "text/plain": [
              "x - 2"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "P0fJPKR6ImEv",
        "outputId": "4f37446f-80e7-44a6-8a96-73f108d31027"
      },
      "source": [
        "poly_polinomio1[2]"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle x^{2} + x$",
            "text/plain": [
              "x**2 + x"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "5OcTnveyIj9T",
        "outputId": "7a446268-9f52-48c0-c607-f15a382f1db6"
      },
      "source": [
        "poly_polinomio1[3]"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle 3 x$",
            "text/plain": [
              "3*x"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "id": "K2GN330tEY3V",
        "outputId": "e262b783-e857-4543-8733-149727f31280"
      },
      "source": [
        "xs = np.linspace(0, 100, num=100)\n",
        "for i in range(1,5):\n",
        "  lambda_tn = sp.lambdify(x, poly_polinomio1[i], 'numpy')\n",
        "  ys = lambda_tn(xs)\n",
        "  \n",
        "  plt.plot(xs, ys)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TxBgjOiZGBge",
        "outputId": "9501e91a-0b6b-4eaa-9c2d-933664d87c8e"
      },
      "source": [
        "from sympy import Derivative, diff, simplify\n",
        "for i in range(1,6):\n",
        "  fx = poly_polinomio1[i]\n",
        "  dx = Derivative(fx, x).doit()\n",
        "  dx\n",
        "  simplify(dx)\n",
        "  print(dx)\n"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2*x + 1\n",
            "3\n",
            "-3*x**2 - 2*x + 3\n",
            "-3*x**2 - 8*x + 3\n"
          ]
        }
      ]
    }
  ]
}